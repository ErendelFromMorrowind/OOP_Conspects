      Общее понятие функции. Описание и пользованеи функций

Подпрограммой в любом алгоритмическом языке называют сомстоятельную программную единицу, спроектированную для решения конкретной задачи;

Они делятся на:
  Внутренние и внешние;
  Процедуры и функции;

Фунуция — подпрограмма, которая возвращает результат своих действий;

Процедуры могут работать без сохранения значения;

Функция всегда решает небольшую задачу. Описание работы функции должно быть формулируемо одним простым предложением;
Тело функции умещается на одном экране.

  Определение и вызов статических функций
Использование любой функции включает обязательные этапы:
  1) Её определение — общее описание работы;
  2) Вызов функции — функция используется с конкретными переменными;

Функция пишется В class Program вне Main;
Их можно писать и до, и после Main, но принято писать до неё;

static void MyFunction()
{
  Console.Clear();
  Console.ForgroundColor = ConsoleColor.Magenta;
  Console.WriteLine("\n Экран очищен");
  Console.ResetColor();
}

В круглых скобка пишутся параметры\аргументы функции;

Если функция будет возвращать одно значение, то при определении необходимо:
  Указать тип значения (второе слово, не void);
  Использовать ключевое слово return;
static ТИП()
{
  //тело функции;
  ...
  return возвращаемое_значение;
}

return без выражения можно употреблять только если функция не возвращает значения;

    Параметры функции

Число параметров не ограничивается
В качестве разедителя используется запятая
Порядок, в котором параметры следуют при объявлении и вызове должен сопадать;

static double ratio(double dividend,double divisor)
{
  if (divisor!=0) return didivident / divisor;
  else return 0;
}

static void Main(string[] args)
{
  double a=3,b=4,c=5,d=6;
  c = ratio(a,b) * ratio(11,10) + ratio(c,d+a*c));
  Console.Write("\n В результате расчёта выражения получили c={0}",c);
  Console.ReadKey();
}

При вызове задются фактические параметры, а в функции используются формальные;

  Необязательные параметры функции
Для необязательных параметров необходимо объявить значение по умолчанию;
Псоле необязательных параметров все последующие также должны быть необязательными;

static int OptionalParam(int x, int y, int z = 5, int s = 4)
{
  return x + y + z + s;
}
static void Main(string[] args)
{
  int a = 4;
  int r1 = OptionalParam(2,3,10,15/a);
  int r2 = OptionalParam(2,3,10);
  int r3 = OptionalParam(2,3);
  int r4 = OptionalParam(y:2,x:3,s:100)
}

При вызове функций с именованными параметрами порядок, в котором они следуют, можно нарушать
