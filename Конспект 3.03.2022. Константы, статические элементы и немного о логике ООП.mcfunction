        Объектно-ориентированное программирование
1. Всё является объектом;
2. Вычисления осуществляются путём взаимодействия (обмена данными) между объектами, при котором один объект требует, чтобы другой объект выполнил некоторое действие;
3. Каждый объект имеет независимую память, которая состоит из других объектов;
4. Каждый объект является предстваителем класса, у которого общие свойства;
5. В классе задаются все дейвствия для объектов;

Программа, написанная с логикой ООП
{
классы;
объекты;
действия с объектами;
}

    Данные класса:
Константы (const); Поля; Поля для чтения (readonly);

Значение константы не изменяется и даётся при обхявлении, после чего любая попытка изменить это значение приводит к ошибке компиляции;
Константы можно делать публичными потому что константу и так поменять не получится;
Значение константы получают на моменте компиляции;
Вызов константы работает через вызов класса, ведь она не имеет зависимости значения в зависимости от объекта; //SampleClass.x

Поля для чтения, readonly;
Почти то же самое, что и константы, но задаётся один раз в любой момент, когда это кажется правильным. Обычно это делается в конструкторе;
Их тоже можно делать публичными;
У разных объектов они могут отличаться;
class Test
{
  public readonly int x;
  public Test(int x)
  {
    this.x = x;
  }
}

      Статические элементы класса
Статические элементы — элементы, одинаковые для всех объектов класса. Создаются при компиляции и существуют до конструктора. Вызываются по имени класса. Создаются с модификатором static;
Помoгает экономить память, ведь нговые объекты не создают новые статичесике элементы;
Статические методы не имеют информации о полях класса по умолчанию. Информация в них должна передаваться в качестве параметра;
Класс может быть статическим через static class. Если класс статический, для работы с ним объекты создавать не надо;
Метод, объявленный статическим, не может отсылаться к полям своего класса. Нельзя использовать this. Статичесекий метод не может вызвать объектный метод своего класса;
