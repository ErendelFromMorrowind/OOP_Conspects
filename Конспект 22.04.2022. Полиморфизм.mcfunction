            Полиморфизм
Полиморфизм — возможность реализовать одно действие по-разному для объектов разных классов в иерархии;
Методы выглядят одинаково, но различаются в зависимости от того, из какого объекта они вызваны;

При создании массива объекта класса-родителя невозможно будет добраться до параметров объекта класса-потомка;
Базовый[] Массив = new Базовый [3];
Массив[0] = new Потомок1();
Массив[1] = new Потомок2();
Массив[2] = new Потомок3();
froeach(Базовый x in Массив)
  x.Метод();

Нам надо заставить это работать;

Есть два вида связывания:
Раннее — ссылки на все методы, переменные и т. д. появляются при компиляции кода;
Позднее — ссылки на всё появляются конкретно перед нужным моментом. Как раз на нём и работает полиморфизм;

      Виртуальные методы
Переопределение метода — изменение его реализации в классе-наследнике Переопределив метод, вы получите возможность работать по-разному в базовом классе и наследнике, имея одни и те же аргументы и тип возврата;
Виртуальный метод — это метод, который может быть переопределён;

Появляются два новых коючевых слова.
Первый раз, в который появляется переопределяемый метод, должен сопровождаться словом virtual;
В классе-наследнике при переопределении пишется override;
Имя, тип и параметры должны полностью совпадать;
Виртуальный метод не может быть статическим или приватным;
Если при наличии многоуровневой иерархии виртуальный метод не переопределяется в произовдном классе, выполняется ближайший вариант вверх по иерархии;
Свойства и индексаторы могут быть переопределены;
Если в свойстве есть только get, в производном не получится сделать get и set. Аналогии такие же. Работает странно, лучше просто писать get'ы и set'ы. А вообще лучше всё тестить;

class One
{
  public virtual void Show()
  {
    //Code
  }
}

class Two: One
{
  public override void Show()
  {
    //Code
  }
}


DemoPoint pt1;
switch(i)
{
  case 1: point1 = new DemoPoint(); break;
  case 2: point1 = new DemoShape(); break;
  case 3: point1 = new DemoLine(); break;
}
