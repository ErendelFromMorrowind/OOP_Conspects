            Класс
Представляет собой некий шаблон, описание не только структуры данных, но и поведения, функциональных возможностей объектов этого класса;
Объект класса — переменная класса, которая содержит ланные и работает так, как опиасно в классе;

Упрощённо: класс — инструкция к действиям, а объект — то, над чем действия и производятся;
/*Вложение "Схема кода ООП в парадигме"*/

Класс состоит из двух частей
{
  Данные класса {поля, константы, события};
  Описание возможностей метода класса {методы, свойства, конструкторы, операторы, индексаторы};
}
Поля, константы — очевиндо. События мы пока не трогаем;
Всё из второй группы более или менее относится к действиям;

Названия классов начинаются с большой буквы;

namespace Scary
{
  class Useless
  {
    public int i;
    public float f()
    {
      return i * x;
    }
  }

  class Program
  {
    static void Main()
    {
      MyClass obj1;
      obj1 = new Useless();

      //Изменение значения поля x объекта obj1 на 7;
      obj1.x = 7;
      //Вызов метода f, вызванного для obj1;
      float res = obj1.f();
    }
  }
}

Конструктор класса — специальный метод, который задаёт полям специальные значения;
Создание  объекта
{
  example a;    //создание ссылки на объект
  a = new example();    //Выделение памяти нужного размера и вызвать конструктор класса через new. Использовать надо только в тот момент, когда класс уже нужен;
}

Конструктуров может быть несколько;
1. Имя конструктора = имя класса;
2. Ничего не возвращает, даже void;
3. Может быть несолько конструкторов, отличающихся количеством параметров;
4. Конструктор по умолчанию — конструктор без параметров;
5. Если не написано ни одного конструктора, то он сгенерируется по умолчанию;
6. Всегда нужно писать  хотя бы один конструктор без параметров;
7. Конструктор не может быть вызван несколько раз;

    Утечка памяти
Деструктор — метод уничтожения объектов;
Используется чтобы не оставлять "Хвостов", занимающих память;
~class_name()
{
    //destructor_code;
}

В .NET Framework'е деструктор вызывается сборщиком мусора непосредственно перед удалением объекта;
Вручную в C# это можно сделать с помощью метода Dispose();
